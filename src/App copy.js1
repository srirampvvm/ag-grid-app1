import React from "react"
import { AgGridColumn, AgGridReact } from 'ag-grid-react';
import { render } from "react-dom"
//import ClientSideRowModelModule from '@ag-grid-community/client-side-row-model';
import { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';

import Script from "react-load-script";

import 'ag-grid-community/dist/styles/ag-grid.css';
import 'ag-grid-community/dist/styles/ag-theme-alpine.css';

import AGConfig from "./AGConfig"

class AG extends React.Component {

    constructor() {
        super()

        this.state = {
            //modules: [ClientSideRowModelModule],
            //components: { yearCellEditor: getYearCellEditor() },//part of AllCommunityModules
            modules: [InfiniteRowModelModule],
            components: [{ datePicker: window.getDatePicker() }, {
                loadingRenderer: function (params) {
                    if (params.value !== undefined) {
                        return params.value;
                    } else {
                        return '<img src="https://www.ag-grid.com/example-assets/loading.gif">';
                    }
                },
            }],

            rowBuffer: 0,
            rowModelType: 'infinite',
            paginationPageSize: 100,
            cacheOverflowSize: 2,
            maxConcurrentDatasourceRequests: 1,
            infiniteInitialRowCount: 1000,
            maxBlocksInCache: 10,

            gridConfig: this.getGridConfig(),
            rowData: [],
            changes: {
                original: [],
                added: [],
                deleted: [],
                modified: [],
                reset: function () {
                    this.original = [];
                    this.added = [];
                    this.deleted = [];
                    this.modified = [];
                }
            }
        }

    }

    changes = {
        original: [],
        added: [],
        deleted: [],
        modified: [],
        reset: function () {
            this.original = [];
            this.added = [];
            this.deleted = [];
            this.modified = [];
        }
    }

    getGridConfig = () => {
        console.log('fetching GridConfig')
        const httpRequest = new XMLHttpRequest();
        httpRequest.open(
            'GET',
            '/gc.js?sid=test',
            false
        );
        httpRequest.send();
        //const gridConfig = JSON.parse(JSON.stringify(AGConfig))
        let gridConfig = (JSON.parse(httpRequest.responseText));
        gridConfig.columnDefs.push({ field: 'rid', hide: false });
        gridConfig.columnDefs.push({ field: 'uc', hide: false });
        gridConfig.colIndx = new Array();
        gridConfig.uc = '';
        gridConfig.columnDefs.forEach((colDef, i) => {
            gridConfig.colIndx[colDef.field] = i
            gridConfig.uc = gridConfig.uc + '0';
        })
        return gridConfig;
    }

    fetchData = (api) => {
        const updateData = (data) => {
            var dataSource = {
                rowCount: 500,
                getRows: function (params) {
                    //alert('asking for ' + params.startRow + ' to ' + params.endRow);
                    setTimeout(function () {
                        var rowsThisPage = data.slice(params.startRow, params.endRow);
                        var lastRow = -1;
                        if (data.length <= params.endRow) {
                            lastRow = data.length;
                        }
                        params.successCallback(rowsThisPage, lastRow);
                    }, 500);
                }
            };

            this.gridApi.setDatasource(dataSource);
        };

        // this.state.changes.reset()
        // this.state.changes.original = JSON.parse(JSON.stringify(rowData))
        // rowData.forEach((element, i) => {
        //     element.rid = i;
        //     element.uc = this.state.gridConfig.uc;
        // })
        // this.setState({ ...this.state, rowData: rowData })

        console.log('fetching data')
        fetch('https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/sample-data/rowData.json')
            .then(result => result.json())
            .then(rowData => { updateData(rowData) })


        // const httpRequest = new XMLHttpRequest();
        // httpRequest.open(
        //     'GET',
        //     'https://www.ag-grid.com/example-assets/olympic-winners.json'
        // );
        // httpRequest.send();
        // httpRequest.onreadystatechange = () => {
        //     if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        //         updateData(JSON.parse(httpRequest.responseText));
        //     }
        // };

    }
    onGridReady = params => {
        this.gridApi = params.api
        this.gridColumnApi = params.columnApi;
        this.fetchData(this.gridApi);
    }

    insertRow = () => {
        var rowDataItem = this.getRowWithDefaults()
        if (window.onAddRow) {
            rowDataItem = window.onAddRow(rowDataItem)
        }
        rowDataItem.uc = '+';
        rowDataItem.rid = this.state.changes.original.length;
        const res = this.gridApi.applyTransaction({ add: [rowDataItem] });
        const changes = this.state.changes
        res.add.forEach(function (rowNode) {
            changes.added.push(rowNode.data)
        })
    }

    getInserted = e => {
        const rows = new Array()
        this.state.changes.added.forEach((row, i) => {
            if (row.uc != '-') {
                rows.push(row)
            }
        })
        alert(`inserted: ${JSON.stringify(rows)}`)
        return rows
    }

    deleteRow = e => {
        const changes = this.state.changes
        const selectedNodes = this.gridApi.getSelectedNodes()
        const selectedData = selectedNodes.map(node => {
            if (node.data.uc != '+') {
                changes.deleted.push(node.data)
            }
            node.data.uc = '-';
            return node.data
        })
        this.gridApi.applyTransaction({ remove: selectedData });
    }

    getDeleted = e => {
        const rows = new Array()
        this.state.changes.deleted.forEach((row, i) => {
            rows.push(row)
        })
        alert(`deleted: ${JSON.stringify(rows)}`)
        return rows
    }

    cellValueChanged = (params) => {
        if (params.colDef.field == 'model' && params.newValue == '1') {
            alert('value cannot be 1')
            params.node.setDataValue('model', params.oldValue);
        } else {
            const rid = params.data.rid
            const oldRow = this.state.changes.original[rid];
            if (oldRow) {
                let uc = params.data.uc
                if (uc != '+' && uc != '-') {
                    let index = this.state.gridConfig.colIndx[params.colDef.field]
                    if (oldRow[params.colDef.field] != params.newValue) {
                        params.data.uc = uc.substr(0, index) + '1' + uc.substr(index + 1);
                    } else {
                        params.data.uc = uc.substr(0, index) + '0' + uc.substr(index + 1);
                    }
                }
            }
            console.log(`oldValue: ${params.oldValue}, newValue: ${params.newValue}, column: ${params.colDef.field}`)
        }
        if (params.data.uc.indexOf('1') != -1) {
            this.state.changes.modified.push(params.data);
        }
    }

    getModified = () => {
        const rows = new Array()
        this.state.changes.modified.forEach((row, i) => {
            if (row.uc.indexOf('1') != -1) {
                rows.push(row)
            }
        })
        alert(`modified: ${JSON.stringify(rows)}`)
        return rows
    }
    getRowWithDefaults() {
        return {}
    }


    handleScriptError() {
        console.log("Error while loading script");
    }

    handleScriptLoad() {
        console.log("Script loaded successfully");
    }

    onPageSizeChanged = (newPageSize) => {
        var value = document.getElementById('page-size').value;
        this.gridApi.paginationSetPageSize(Number(value));
    };

    onPaginationChanged = (params) => {
        console.log('onPaginationPageLoaded');
        if (this.gridApi) {
            // setText('#lbLastPageFound', this.gridApi.paginationIsLastPageFound());
            // setText('#lbPageSize', this.gridApi.paginationGetPageSize());
            // setText('#lbCurrentPage', this.gridApi.paginationGetCurrentPage() + 1);
            // setText('#lbTotalPages', this.gridApi.paginationGetTotalPages());
            //setLastButtonDisabled(!this.gridApi.paginationIsLastPageFound());
        }
    };

    onBtFirst = () => {
        this.gridApi.paginationGoToFirstPage();
    };

    onBtLast = () => {
        this.gridApi.paginationGoToLastPage();
    };

    onBtNext = () => {
        this.gridApi.paginationGoToNextPage();
    };

    onBtPrevious = () => {
        this.gridApi.paginationGoToPreviousPage();
    };

    onBtPageFive = () => {
        this.gridApi.paginationGoToPage(4);
    };

    onBtPageFifty = () => {
        this.gridApi.paginationGoToPage(49);
    };



    render() {
        return (
            <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
                <Script
                    url="/sid.js"
                    onError={this.handleScriptError.bind(this)}
                    onLoad={this.handleScriptLoad.bind(this)}
                />
                <button onClick={this.fetchData}>Reload</button>
                <button onClick={this.deleteRow}>Delete</button>
                <button onClick={this.getDeleted}>Deleted</button>
                <button onClick={this.insertRow}>Add</button>
                <button onClick={this.getInserted}>Inserted</button>
                <button onClick={this.getModified}>Modified</button>
                <AgGridReact
                    rowSelection="multiple"

                    components={this.state.components}
                    modules={this.state.modules}

                    //pagination={true}
                    //onPaginationChanged={this.onPaginationChanged.bind(this)}

                    rowBuffer={this.state.rowBuffer}
                    rowModelType={this.state.rowModelType}
                    paginationPageSize={this.state.paginationPageSize}
                    cacheOverflowSize={this.state.cacheOverflowSize}
                    maxConcurrentDatasourceRequests={
                        this.state.maxConcurrentDatasourceRequests
                    }
                    infiniteInitialRowCount={this.state.infiniteInitialRowCount}
                    maxBlocksInCache={this.state.maxBlocksInCache}
                    //defaultColDef={gridConfig.columnDefs}
                    columnDefs={this.state.gridConfig.columnDefs}
                    //enterMovesDown={true}
                    //enterMovesDownAfterEdit={true}
                    stopEditingWhenGridLosesFocus={true}
                    onCellValueChanged={this.cellValueChanged}
                    onGridReady={this.onGridReady}
                //rowData={this.state.rowData}
                />
                <h1>AGGrid</h1>
            </div>
        )
    }

}
var cellRenderer = function (params) {
    return parseInt(params.node.id) + 1;
};
function setText(selector, text) {
    document.querySelector(selector).innerHTML = text;
}
function setLastButtonDisabled(disabled) {
    document.querySelector('#btLast').disabled = disabled;
}

export default AG